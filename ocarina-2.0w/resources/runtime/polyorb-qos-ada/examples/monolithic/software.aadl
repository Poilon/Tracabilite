-- $Id: software.aadl 4631 2008-09-23 16:17:39Z zalila $

data message
properties 
  Data_Model::Data_Representation => integer;
end message;

--  subprograms

subprogram transmit_message
features
  msg_in  : in  parameter message;
  msg_out : out parameter message;
properties
  source_language => Ada95;
  source_name     => "Repository.Transmit_Message";
end transmit_message;

subprogram send_message
features
  msg_out : out parameter message;
properties
  source_language => Ada95;
  source_name     => "Repository.Send_Message";
end send_message;

subprogram receive_message
features
  msg_in : in parameter message;
properties
  source_language => Ada95;
  source_name     => "Repository.Receive_Message";
end receive_message;

--  sender thread

thread sender
features
  msg_out : out event data port message;
properties
  Dispatch_Protocol => Periodic;
  Period            => 1000 Ms;
end sender;

thread implementation sender.simple
calls {
  sp1 : subprogram send_message;
};
connections
  parameter sp1.msg_out -> msg_out;
end sender.simple;

--  receiver thread

thread receiver
features
  msg_in : in event data port message;
properties
  Dispatch_Protocol => Aperiodic;
end receiver;

thread implementation receiver.simple
calls {
  sp1 : subprogram receive_message;
};
connections
  parameter msg_in -> sp1.msg_in;
end receiver.simple;

--  transmitter threads

thread transmitter
features
  msg_in  : in  event data port message;
  msg_out : out event data port message;
properties
  Dispatch_Protocol => Aperiodic;
end transmitter;

thread implementation transmitter.simple
calls {
  sp1 : subprogram transmit_message;
  };
connections
  parameter msg_in      -> sp1.msg_in;
  parameter sp1.msg_out -> msg_out;
end transmitter.simple;

--  process

process multithreaded_node
end multithreaded_node;

process implementation multithreaded_node.simple
subcomponents
  sender      : thread sender.simple;
  transmitter : thread transmitter.simple;
  receiver    : thread receiver.simple;
connections
  event data port sender.msg_out      -> transmitter.msg_in;
  event data port transmitter.msg_out -> receiver.msg_in;
end multithreaded_node.simple;

