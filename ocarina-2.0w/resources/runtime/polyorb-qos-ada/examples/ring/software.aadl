data message
properties 
  Data_Model::Data_Representation => Integer;
end message;

--  subprograms

subprogram transmit_message
features
  msg_in : in parameter message;
  msg_out : out parameter message;
properties
  source_language => Ada95;
  source_name => "Repository.Transmit_Message";
end transmit_message;

subprogram send_message
features
  msg_out : out parameter message;
properties
  source_language => Ada95;
  source_name => "Repository.Send_Message";
end send_message;

subprogram receive_message
features
  msg_in : in parameter message;
properties
  source_language => Ada95;
  source_name => "Repository.Receive_Message";
end receive_message;

--  sender threads

thread sender
features
  msg_out : out event data port message;
properties
  Dispatch_Protocol => Periodic;
  Period            => 1000 Ms;
end sender;

thread implementation sender.simple
calls {
  sp1 : subprogram send_message;
};
connections
  parameter sp1.msg_out -> msg_out;
end sender.simple;

--  receiver threads

thread receiver
features
  msg_in : in event data port message;
properties
  Dispatch_Protocol => Aperiodic;
end receiver;

thread implementation receiver.simple
calls {
  sp1 : subprogram receive_message;
};
connections
  parameter msg_in -> sp1.msg_in;
end receiver.simple;

--  transmitter threads

thread transmitter
features
  msg_in : in event data port message;
  msg_out : out event data port message;
properties
  Dispatch_Protocol => Aperiodic;
end transmitter;

thread implementation transmitter.simple
calls {
  sp1 : subprogram transmit_message;
  };
connections
  parameter msg_in -> sp1.msg_in;
  parameter sp1.msg_out -> msg_out;
end transmitter.simple;

--  transmitter processes

process transmitter_node
features
  msg_in : in event data port message;
  msg_out : out event data port message;
end transmitter_node;

process implementation transmitter_node.simple
subcomponents
  th1 : thread transmitter.simple;
connections
  event data port msg_in -> th1.msg_in;
  event data port th1.msg_out -> msg_out;
end transmitter_node.simple;

process implementation transmitter_node.complex
subcomponents
  th1 : thread transmitter.simple;
  th2 : thread transmitter.simple;
connections
  event data port msg_in -> th1.msg_in;
  event data port th1.msg_out -> th2.msg_in;
  event data port th2.msg_out -> msg_out;
end transmitter_node.complex;

--  sender processes

process sender_node
features
  msg_in : in event data port message;
  msg_out : out event data port message;
end sender_node;

process implementation sender_node.simple
subcomponents
  th1 : thread sender.simple;
  th2 : thread receiver.simple;
connections
  event data port msg_in -> th2.msg_in;
  event data port th1.msg_out -> msg_out;
end sender_node.simple;
