import/SCENARIO_1 :

   - call an external C procedure without argument
   -> tests void function import

import/SCENARIO_2 :

   - call an external C procedure with a readonly integer argument
   -> tests in mode on basic types

import/SCENARIO_3 :

   - call an external C procedure with a readonly integer and a write-only argument, then pass it to another external C procedure
   -> tests in and out modes on basic types
	
import/SCENARIO_4 :

   - call an external C procedure with a readonly integer and a write-only structure parameter, then pass the structure to another external C procedure
   -> tests in and out modes on composed types

NOTE :

   In order to compile, the generated makefile must be manually edited.

   1) The C files must be compiled (only compiled : use the gcc -c option!) and named after the original C file (ie. <file>.c produces a <file>.o object)
   2) the generated objects should be added to each "gnatmake" and "gnat make" commands of the makefile.
  
   Here's the diff between generated makefiles and edited ones :
   
-        gnatmake $< -I/home/gilles/ocarina/examples/ocarina/import `ocarina-config --api-polyorb` `polyorb-config`
+       gcc -c /home/gilles/ocarina/examples/ocarina/import/receive.c -o receive.o
+        gnatmake $< -I/home/gilles/ocarina/examples/ocarina/import `ocarina-config --api-polyorb` `polyorb-config` receive.o
         if [ -r polyorb-parameters-partition.adb ]; then \
            gnat compile -a polyorb-parameters-partition.adb `polyorb-config`;\
-           gnat make $< -b -l -I/home/gilles/ocarina/examples/ocarina/import `ocarina-config --api-polyorb` `polyorb-config`;\
+           gnat make $< -b -l -I/home/gilles/ocarina/examples/ocarina/import `ocarina-config --api-polyorb` `polyorb-config` receive.o;\
	 fi