\input texinfo @c -*-texinfo-*-

@c %**start of header

@c oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
@c
@c                                Style Guide
@c
@c  1. Always put a @noindent on the line before the first paragraph
@c     after any of these commands:
@c
@c          @chapter
@c          @section
@c          @subsection
@c          @subsubsection
@c          @subsubsubsection
@c
@c          @end smallexample
@c          @end itemize
@c          @end enumerate
@c
@c  2. DO NOT use @example. Use @smallexample instead.
@c     a) DO NOT use highlighting commands (@b{}, @i{}) inside an @smallexample
@c        context.  These can interfere with the readability of the texi
@c        source file.  Instead, use one of the following annotated
@c        @smallexample commands, and preprocess the texi file with the
@c        gentexifile tool (which generates appropriate highlighting):
@c        @smallexample @c ada
@c        @smallexample @c adanocomment
@c        @smallexample @c projectfile
@c     b) The "@c ada" markup will result in boldface for reserved words
@c        and italics for comments
@c     c) The "@c adanocomment" markup will result only in boldface for
@c        reserved words (comments are left alone)
@c     d) The "@c projectfile" markup is like "@c ada" except that the set
@c        of reserved words include the new reserved words for project files
@c
@c  3. Each @chapter, @section, @subsection, @subsubsection, etc.
@c     command must be preceded by two empty lines
@c
@c  4. The @item command should be on a line of its own if it is in an
@c     @itemize or @enumerate command.
@c
@c  5. DO NOT put trailing spaces at the end of a line.  Such spaces will
@c     cause the document build to fail.
@c
@c  6. DO NOT use @cartouche for examples that are longer than around 10 lines.
@c     This command inhibits page breaks, so long examples in a @cartouche can
@c     lead to large, ugly patches of empty space on a page.
@c
@c  7. To add an entry to the bibliography, you must:
@c     * add it to polyorb-hi_ug.bib
@c     This will generate the correct polyorb-hi_ug_ref.texi file
@c     You may then cite the correct reference.
@c
@c oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo

@c $Id: ocarina.texi 5944 2008-11-19 10:27:00Z zalila $

@include version.texi

@setfilename polyorb-qos-ada_ug.info
@settitle PolyORB AADL personality User's Guide
@afourpaper

@documentlanguage en
@documentencoding ISO-8859-1

@c description and copyright

@copying
Copyright @copyright{} 2003-2009 @'{E}cole
nationale sup@'{e}rieure des t@'{e}l@'{e}communications

@noindent
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being ``GNU Free Documentation License'', with the
Front-Cover Texts being ``PolyORB High Integrity User's Guide'', and
with no Back-Cover Texts.  A copy of the license is included in the
section entitled ``GNU Free Documentation License''.

@end copying

@c title page, contents, copyright

@titlepage
@title PolyORB AADL personality User's Guide
@subtitle Version @value{EDITION}
@subtitle Date: @value{UPDATED}
@author J@'er@^ome Hugues, Thomas Vergnaud, Bechir Zalila
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@iftex
@contents
@end iftex

@c top node

@ifnottex
@node Top, About This Guide, (dir), (dir)
@top PolyORB AADL personality User's Guide
@insertcopying
@end ifnottex

@menu
* About This Guide::
* Ada Mapping Rules::           
* GNU Free Documentation License::
* Index::

@detailmenu
 --- The Detailed Node Listing ---

About This Guide

* What This Guide Contains::
* Conventions::

@end detailmenu
@end menu

@ifhtml
@center @code{$LastChangedDate: 2008-11-19 11:27:00 +0100 (mer, 19 nov 2008) $}
@end ifhtml

@c -------------------------------------------------------------------
@node About This Guide
@unnumbered About This Guide
@c -------------------------------------------------------------------

@noindent
This guide describes the use of the AADL personality for PolyORB, a
schizophrenic middleware.

@menu
* What This Guide Contains::
* Conventions::
@end menu

@c -------------------------------------------------------------------
@node What This Guide Contains
@unnumberedsec What This Guide Contains
@c -------------------------------------------------------------------

@noindent
This guide contains the following chapters:
@itemize @bullet

@item @ref{Ada Mapping Rules} details the mapping rules used by
Ocarina to generate Ada code from AADL models

@item
@ref{GNU Free Documentation License} contains the text of the license
under which this document is being distributed.

@end itemize

@c -------------------------------------------------------------------
@node Conventions
@unnumberedsec Conventions
@cindex Conventions
@cindex Typographical conventions
@c -------------------------------------------------------------------

@noindent
Following are examples of the typographical and graphic conventions used
in this guide:

@itemize @bullet
@item
@code{Functions}, @code{utility program names}, @code{standard names},
and @code{classes}.

@item
@samp{Option flags}

@item
@file{File Names}, @file{button names}, and @file{field names}.

@item
@var{Variables}.

@item
@emph{Emphasis}.

@item
[optional information or parameters]

@item
Examples are described by text
@smallexample
and then shown this way.
@end smallexample
@end itemize

@noindent
Commands that are entered by the user are preceded in this manual by
the characters @w{``@code{$ }''} (dollar sign followed by space). If
your system uses this sequence as a prompt, then the commands will
appear exactly as you see them in the manual. If your system uses some
other prompt, then the command will appear with the @code{$} replaced
by whatever prompt character you are using.

Full file names are shown with the ``@code{/}'' character
as the directory separator; e.g., @file{parent-dir/subdir/myfile.adb}.
If you are using GNAT on a Windows platform, please note that
the ``@code{\}'' character should be used instead.

@c -------------------------------------------------------------------
@node Ada Mapping Rules
@appendix AADL to Ada Mapping Rules
@cindex ARAO
@c -------------------------------------------------------------------

ARAO is an AADL runtime built on top of the PolyORB middleware. It
provides a smooth integration of AADL concepts on top of a generic
middleware, providing many configuration capabilities to the model
developer.

@menu
* Components mapping rules::  
* Setup of the application::    
* Node positioning::
* Description of the ARAO API::  
@end menu

We choose to use a middleware in order to ensure the communication
between the nodes of the distributed application is the schizophrenic
middleware PolyORB. It's obvious that a large part of the code (thread
creation for example) is the same for distributed application. This
code is written once and used as the middleware API. The use of
PolyORB implies that communications between the application node are
performed by requests and rely on an ORB (Object Request Broker). A
full description of the ARAO API is given in @ref{Description of
the ARAO API}.

The present chapter defines the mapping Ocarina uses to generate Ada
code and PolyORB primitives.

These rules are triggered when the @code{PlyORB-QoS-Ada} code
generator is selected.

@node  Components mapping rules
@section Components mapping rules

The unnamed namespace of an AADL description is mapped to a
conventional Ada package called @code{Namespaces}. The several namespaces
(which are children of the unnamed namespace) are mapped to
subpackages of the @code{Namespaces} package. For each node of the
distributed application, a @code{Namespaces} package ``family'' is
generated; it contains all the data and subprograms mappings that are
used by this node.

@menu
* Data components mapping::
* Subprogram components mapping::
* Thread components mapping::
* Process components mapping::
@end menu

@node  Data components mapping
@subsection Data components mapping

@subsubsection Base type mapping

A subcomponent-free @code{data} component should contain a
@code{ARAO::data_type} property in order to generate the corresponding
Ada type. ARAO predefined types are : @code{integer}, @code{float},
@code{null}, @code{string} and @code{boolean}. Normal data components are
mapped to the related Ada type, as seen in the following AADL example
:
@include data-component-simple.aadl.texi

is mapped to the following Ada95 code:

@include data-component-simple.ada.texi

@subsubsection Composed type mapping

AADL @code{data} component implementations may contain others @code{data}
subcomponents. In this case, the @code{data} component is mapped to an
Ada record type.

As an example, the following AADL component implementation:

@include data-component-record.aadl.texi

is mapped to the following Ada code :

@include data-component-record.ada.texi

@subsubsection Protected type mapping

AADL protected @code{data} components must be declared in the same way
composed types are, i.e. by encapsulating them within another AADL type
declaration.

For each protected @code{data} components, a new type is declared which
contains all data components (i.e. fields of the related composed type)
plus a mutex object within a Ada record. As for composed types, all
fields must be either a previously user-declared type or a ARAO base
type. Accessors and building features for the type will be declared
too, as for the data-owned procedures (``methods'') designated in the
@code{features} part of the @code{data} component.

The generated code enforces access protection, and declare type's
object-oriented procedures (``methods'', as defined by user), using
the middleware mutexes. A ``method'' of a type must always has as
@code{features} a @code{requires data access} on this data.

For example, the following AADL declaration :

@include data-component-protected.aadl.texi

would generate a code like this :

@include protected_type-generic-package.ada.texi

and the @code{update} method which will be call by generated code is like this :

@include protected_type-generic-package-method.ada.texi

Where the procedures @code{Enter} and @code{Leave} are middleware mutexes'
@code{take} and @code{release} procedures.

We define @i{protected data type internal type} as the components
(usually only one) , excluding the mutex, which are embedded in a
protected type as a @code{subcomponent}. The @i{protected data type
internal type} could be either a protected type or a ``normal''
(non-protected) type. Eventually, all protected types can be
decomposed in a set of basic types.

@subsubsection Accessor usage

Data accessors can be used by the user exactly as data-owned procedure
are. In the current version, they are the only ones actually called by
the PolyORB AADL runtime, contrary to the generated interfaces which
are not called at all.

Protected type accessors include @code{Set_X} and @code{Get_X} Ada
procedures, where @code{X} is the name of the Field which contains the
real (internal) data type. Those procedures are access-protected,
using the protected object's middleware mutex to ensure mutual
exclusion. The @code{Build} procedure will ensure mutex
initialization.

An example of safe usage of accessors is :

@include accessor-usage.ada.texi

relying on the following AADL declarations :

@include accessor-usage.aadl.texi

with the following package specification and body generated :

@include accessor-package.ada.texi

@include accessor-package-body.ada.texi

Note that the @code{Set} usage could had been replaced by an
@code{Initialization} method of Counter_Type, and that the @code{Get} could
had been replaced by a @code{Test_Value} method.

@subsubsection Middleware mapping

We have seen that in the translation phase, the AADL data components
are mapped to Ada95 types. Since the communication between nodes is
performed using the PolyORB tools, all data sent in a request must
have the neutral type @code{PolyORB.Any.Any}. So, conversion functions
from and to this neutral type must be generated. For a process named
@code{proc} these conversion functions will be generated in the
@code{proc_Helpers} package. Example:

@include data-component-simple.aadl.texi

is a definition for an integer type, the conversion routines generated
in @code{proc_Helpers} are:

@include data-component-helper.ada.texi

Note that we use the @code{Namespaces} package created in the translation
phase.

@subsubsection AADL Properties support

Available properties for data components can be found in SAE AS5506,
in 5.1 page 50 and in Appendix A, pages 197-218.

@multitable @columnfractions .4 .6
@item Concurency_control_protocol
@tab Supported : None, Access_Protected
@item Not_Collocated
@tab Not Supported
@item Provided_Access
@tab Not Supported
@item Required_Access
@tab Not Supported
@item Source_Code_Size
@tab Not Supported
@item Source_Language 
@tab Not Supported
@item Source_Name
@tab Not Supported
@item Source_Text
@tab Not Supported
@item Type_Source_Name
@tab Not Supported
@end multitable

@node  Subprogram components mapping
@subsection Subprogram components mapping

AADL subprograms are mapped to Ada procedures. In case of data-owned
subprograms, they are managed in the related generated package, as
seen in @ref{Data components mapping}.  The parameters of the
procedure are mapped from the subprogram features with respect to the
following rules:

@itemize
@item 
The parameter name is mapped from the parameter feature name

@item 
The parameter type is mapped from the parameter feature data type as
specified in @ref{Data components mapping}

@item 
The parameter orientation is the same as the feature orientation
(``in'', ``out'' or ``in out'').
@end itemize

The body of the mapped procedure depend on the nature of the
subprogram component. Subprogram components can be classified in many
kind depending on the value of the @code{Source_Language},
@code{Source_Name} and @code{Source_Text} standard AADL properties and
the existence or not of call sequences in the subprogram
implementation. There are four kinds of subprogram components:

@enumerate
@item The empty subprograms.
@item The opaque subprograms.
@item The pure call sequence subprograms.
@item The hybrid subprograms.
@end enumerate

@subsubsection Mapping of empty subprograms

Empty subprograms correspond to subprograms for which there is neither
@code{Source_Language} nor @code{Source_Name} nor @code{Source_Text}
values nor call sequences. Such kind of subprogram components has no
particular utility. For example:

@include empty-subprogram.aadl.texi

is en empty subprogram. A possible Ada implementation for this
subprogram could be:

@include empty-subprogram.ada.texi

@subsubsection Mapping of opaque subprograms

Opaque subprograms are the simplest ``useful'' subprogram components
(in code generation point of view). For these subprograms, the
@code{Source_Language} property indicates the programming language of
the implementation (C or Ada95). The @code{Source_Name} property indicates
the name of the subprogram implementing the subprogram:
@itemize
@item 
for Ada95 subprograms, the value of the @code{Source_Name} property
is the @b{fully qualified name} of the subprogram
(e.g. @code{My_Package.My_Spg}). If the package is stored in a file
named according to the GNAT Ada compiler conventions, there is no need
to give a @code{Source_Text} property for Ada95 subprograms. Otherwise
the @code{Source_Text} property is necessary for the compiler to fetch
the implementation files.

@item
for C subprograms, the value of the @code{Source_Name} property is the
@b{name} of the C subprogram implementing the AADL subprogram. The
@code{Source_Text} is mandatory for this kind of subprogram and it
must give one of the following information:
@itemize
@item 
the path to the @code{.c} source file that contains the implementation
of the subprogram.

@item
the path to one or more precompiled object files (@code{.o}) that
implement the AADL subprogram.

@item
the path to one or more precompiled @code{C} library (@code{.a}) that
implement the AADL subprogram.
@end itemize
These information can be used together, for example may give the
@code{C} source file that implements the AADL subprogram, an object
file that contains entities used by the @code{C} file and a library
that is necessary to the @code{C} sources or the objects.

@end itemize

In this case, the code generation consist of creating a shell for the
implementation code. In the case of Ada subprograms, the generated
subprogram renames the implementation subprogram (using the Ada95
renaming facility). Example:

@include opaque-subprogram.aadl.texi

The generated code for the @code{sp.impl} component is:

@include opaque-subprogram.ada.texi

The code of the @code{Repository.sp_impl} procedure is provided by the
architecture and must be conform with the @code{sp.impl} signature. The
coherence between the two subprograms will be verified by the Ada95
compiler.

The fact that the hand-written code is not inserted in the generated
shell allows this code to be written in a programming language other
than Ada95. Thus, if the implementation code is C we have this
situation:

@include opaque-subprogram-c.aadl.texi

The @code{Source_Name} value is interpreted as the name of the C
subprogram implementing the AADL subprogram. The generated code for
the @code{sp.impl} component is:

@include opaque-subprogram-c.ada.texi

This approach will allow us to have a certain flexibility by
separating the generated code and the hand-written code. We can modify
the AADL description without affecting the hand-written code (the
signature should not be modified of course).

@subsubsection Mapping of pure call sequence subprograms

In addition to the opaque approach which consist of delegating all the
subprogram body writing to the user, AADL allows to model subprogram
as a pure call sequence to other subprograms. Example:

@include pure-call-sequence-subprogram.aadl.texi

In this case, the subprogram connects together a number of other
subprograms. In addition to the call sequence, the connections clause
completes the description by specifying the connections between
parameters. The pure sequence call model allows to generate complete
code : the calls in the call sequence corresponds to Ada95 procedure
calls and the connections between parameters correspond to eventual
intermediary variables. The Ada95 code generated for the subprogram
@code{spA.impl} is:

@include pure-call-sequence-subprogram.ada.texi

Note that in case of pure call sequence subprograms, the AADL
subprogram must contain only one call sequence. If there are more than
one call sequence, it's impossible - in this case - to determine the
relation between them.

@subsubsection Mapping of hybrid subprograms

The two last kinds of subprogram components describe even an opaque
implementation for which all the functional part is written by the
user or a pure call sequence for which all the functional part is
given by the AADL description. These two cases are relatively simple to
implement. However, they don't offer much flexibility. In the general
case we want to integrate the maximum of information within the AADL
description in order to get an easy assembling of the distributed
application components. However, AADL does not provide control
structures (conditions, loops). The best way is to combine the opaque
model and the pure call sequence model.

To illustrate the problem, let's consider the following example: A
subprogram @code{spA} receives an input integer value . The subprogram
behavior depends on the @math{a} value:

@itemize
@item 
If @math{a < 4}, then @math{a} is given to another subprogram @code{spB};

@item 
Else, @code{spA} calls a third subprogram called @code{spC} which give its
return value to @code{spB}
@end itemize

In all cases, the return value of @code{spB} is given to a forth
subprogram @code{spD}; the return value of @code{spD} is returned by
@code{spA}.

The behavior of @code{spA} is illustrated by this algorithm:

@include hybrid-algorithm.ada.texi

We assume that the subprograms @code{spB}, @code{spC} and @code{spD} are
correctly defined.

We have three call sequences. AADL allows only to describe the
architectural aspects of the algorithm (the connections between the
different subprograms). The AADL source corresponding to the last
example is:

@include hybrid-subprogram.aadl.texi

The first remark is that the subprogram implementation contains at the
same time the @code{Source_[Language|Name]} (and a possible
@code{Source_Text}) properties and call sequences. The hand-written
code describes the algorithm. This algorithm should be able to handle
each call sequence as being a block and must be as simple as possible:
the user should not know the content of the call sequence.

The generated code for each block (call sequence) is almost identical
to the generated code for pure call sequence. For each block, a
subprogram is generated. To make things simple for the user, these
subprograms have the same signature (one parameter called Status):

@include hybrid-subprogram-1.ada.texi

The generated code for the @code{spA.impl} subprogram is very simple:

@include hybrid-subprogram-2.ada.texi

The subprogram which describes the algorithm and which should be
written by the user is relatively simple, and does not require any
knowledge of the call sequences contents:

@include hybrid-subprogram-3.ada.texi

@subsubsection Data access

If a subprogram has a @code{requires access} feature to a data, this
data is added to the parameters list, with the mode corresponding to
data access rights (i.e. @code{read-only} => @code{in},
@code{write-only} => @code{out} and @code{read-write} => @code{in
out}).

In the specific case of subprograms requiring protected data access,
user should provides different data depending on subprograms' nature.

If the subprogram is a ``method'' of the protected object (i.e. if it
appears in its @code{features} field), then the user should provides an
implementation of the subprogram which take the subprogram access as
the first parameter, with the mode chosen following the rule described
above. The parameter's name must always be @code{this}. This parameter
type must always be of the protected data type internal type
(cf. @ref{Data components mapping}).

If the subprogram is a not ``method'' of the protected object, user
work depends of the accessed data's @code{Actual_Lock_Implementation}
property, which defines shared variables update policy. This policy
could be either synchronous (@code{synchronous_lock}) or asynchronous
(@code{asynchronous_lock}). Default is asynchronous update policy.

The user must write a subprogram implementation complying to the
following rules :
@itemize
@item 
For each @i{asynchronous policy}-defined data accessed, add an
parameter at beginning of the data's protected type.
@item 
For each @i{synchronous policy}-defined data accessed, add an
parameter at beginning of the subprogram's parameter list of the data's
protected type internal type.
@end itemize
Note that accessed data (found in the subprogram component's
@code{features} field) must always be parsed in the same order they are
declared in the AADL specification. In any case, mode is still chosen
accordingly to the rule describe above.

Note that only opaque subprograms currently support synchronous data
update policy.

If synchronous policy is chosen for a data update policy, the user
should be aware that access protection is ensured by the runtime code
(cf. @ref{Thread components mapping}).

Here is an example of data-owned specification of a protected object :

@include protected-subprogram.aadl.texi

The user provides :

@include protected-subprogram-user.ada.texi

And Ocarina will generate the following implementation for the
access-protected subprogram :

@include protected-subprogram-generated.ada.texi

@subsubsection AADL Properties support

Available properties for subprogram components can be found in SAE
AS5506, in 5.2 page 56 and in Appendix A, pages 197-218.

@multitable @columnfractions .4 .6
@item Actual_Memory_Binding
@tab Not Supported
@item Actual_Subprogram_Call
@tab Not Supported
@item Client_Subprogram_Execution_Time
@tab Not Supported
@item Compute_Deadline
@tab Not Supported
@item Compute_Execution_Time
@tab Not Supported
@item Concurrency_Control_Protocol
@tab Not Supported
@item Queue_Processing_Protocol
@tab Not Supported
@item Queue_Size
@tab Not Supported
@item Recover_Deadline
@tab Not Supported
@item Recover_Execution_Time
@tab Not Supported
@item Server_Subprogram_Call_Binding
@tab Not Supported
@item Source_Code_Size
@tab Not Supported
@item Source_Data_Size
@tab Not Supported
@item Source_Heap_Size
@tab Not Supported
@item Source_Stack_Size
@tab Not Supported
@item Source_Language
@tab Supported (Ada)
@item Source_Name
@tab Supported
@item Source_Text
@tab Supported
@end multitable

@node  Thread components mapping
@subsection Thread components mapping

The mapping of thread components is a little bit more complicated than
the mapping of data components. Threads are mapped to an Ada95
parameter-less procedure which executes the thread work (periodically
or aperiodically depending on the thread nature). For each periodic
thread, a middleware thread is created using the API described in
@ref{Description of the ARAO API}. For example~:

@include thread-component.aadl.texi

@subsubsection Servant mapping

If this thread belongs to a process @code{proc}, and if @code{th1} is the
name of the thread subcomponent of @code{proc} having the type
@code{sender}, then a package @code{proc_Servants} is created:

@include thread-servants.ada.texi

In the main subprogram @code{proc} we find:

@include thread-main.ada.texi

The thread ``in'' or ``in out'' ports are mapped in an Ada protected
object which allows a protected access to these ports. For each port,
a buffer having the port stack size is created, implemented with a 
cyclic array. Since these ports are the destination of other 
components requests, for each in port, a PolyORB Reference is created 
and for each thread containing in ports, a servant is created to handle 
the incoming requests; Example:

@include thread-in-ports.aadl.texi

If this thread belongs to a process @code{proc}, and if @code{th2} is the
name of the thread subcomponent of @code{proc} having the type
@code{receiver}, then the following declarations will be generated in the
@code{proc_Servants} package spec:

@include thread-in-ports-servants.ada.texi

For each ``out'' or ``in out'' port, we declare reference variable for
each ``in'' or ``in out'' port connected to this port.

@subsubsection Shared variables access

In order to comply to the AADL @i{input-processing-output} algorithm,
shared data (either access-protected or not) are not read or written
directly, but through temporary variables.

As seen in @ref{Process components mapping}, any thread can access
shared variables. In order to ensure protected access when needed,
Ocarina will declare a local variable in the @code{thread_controler}
function, whose type is the variable internal type (if the variable
has the protected access property) or the variable real type.

Each time the thread controller is activated (i.e. each time the
related servant is called), the local variable is put to shared
variable value by its @code{Setter} procedure, then processing is done
using the proper user-defined procedure. Then the @code{Getter} is
used to update the shared variable.

Note that both @code{Setter} and @code{Getter} procedures are
generated by Ocarina and ensure access protection, as described in
@ref{Data components mapping}.

Here is an example of generated code of the @code{thread_controler}
procedure which manage a @code{mem_sh} variable.

@include thread-shared_variable-protected.ada.texi

@subsubsection AADL Properties support

Available properties for thread components can be found in SAE AS5506,
in 5.3 page 61 and in Appendix A, pages 197-218.

@multitable @columnfractions .5 .6
@item Activate_Deadline
@tab Not Supported
@item Activate_Execution_Time 
@tab Not Supported
@item Activate_Entrypoint 
@tab Not Supported
@item Active_Thread_Handling_Protocol 
@tab Not Supported
@item Active_Thread_Queue_Handling_Protocol 
@tab Not Supported
@item Actual_Connection_Binding 
@tab Not Supported
@item Actual_Memory_Binding 
@tab Not Supported
@item Actual_Processor_Binding 
@tab Not Supported
@item Allowed_Connection_Protocol 
@tab Not Supported
@item Client_Subprogram_Execution_Time 
@tab Not Supported
@item Compute_Deadline
@tab Not Supported
@item Compute_Execution_Time 
@tab Not Supported
@item Concurrency_Control_Protocol
@tab Not Supported
@item Deactivate_Deadline
@tab Not Supported
@item Deactivate_Execution_Time 
@tab Not Supported
@item Deactivate_Entrypoint
@tab Not Supported
@item Deadline
@tab Not Supported
@item Dispatch_Protocol
@tab Supported (Periodic, Aperiodic)
@item Finalize_Deadline
@tab Not Supported
@item Finalize_Execution_Time
@tab Not Supported
@item Finalize_Entrypoint
@tab Not Supported
@item Initialize_Deadline
@tab Not Supported
@item Initialize_Execution_Time
@tab Not Supported
@item Initialize_Entrypoint
@tab Not Supported
@item Not_Collocated
@tab Not Supported
@item Period
@tab Supported
@item Queue_Size
@tab Not Supported
@item Recover_Deadline
@tab Not Supported
@item Recover_Execution_Time
@tab Not Supported
@item Server_Subprogram_Call_Binding
@tab Not Supported
@item Source_Code_Size
@tab Not Supported
@item Source_Data_Size
@tab Not Supported
@item Source_Heap_Size
@tab Not Supported
@item Source_Stack_Size
@tab Supported
@item Source_Name
@tab Not Supported
@item Source_Text
@tab Not Supported
@item Source_Language
@tab Not Supported 
@item Synchronized_Component
@tab Not Supported
@end multitable

@node Process components mapping
@subsection Process components mapping

The main component in this phase is the @code{process} component. The
distributed application is a set of processes which communicate
between each other. Each @code{process} is mapped to an Ada95 main
subprogram which leads to an executable after being compiled.

@subsubsection Shared variables declaration and initialization

In the case where a @code{process} contains shared variables declaration
(which should always refers to local @code{data} components, as Ocarina does
not support variables shared amongst multiples process), a variable is
declared in the @file{proc_servant} body package.

If the shared variable has a protected access property, Ocarina will also
add a @code{initialize} procedure to the package, and set it as the
package initialization procedure for the middleware, which will ensure
that it is ran before any usage of the package. This procedure calls
protected type's @code{Build} interface (cf. @ref{Data components
mapping}), initializing middleware's mutexes.

Note that shared variables (either protected or not) are visible from
any thread of the process. How those variables are accessed and
updated is described in @ref{Thread components mapping}.

Here is a AADL specification for declaring a data shared between two
threads, with protected access in a process:

@include process-shared_variable-protected.aadl.texi

and here is the related code generated by Ocarina :

@include process-shared_variable-protected.ada.texi

@subsubsection AADL Properties support

Available properties for process components can be found in SAE
AS5506, in 5.5 page 77 and in Appendix A, pages 197-218.

@multitable @columnfractions .5 .6
@item Active_Thread_Handling_Protocol
@tab Not Supported
@item Active_Thread_Queue_Handling_Protocol
@tab Not Supported
@item Actual_Connection_Binding
@tab Not Supported
@item Actual_Memory_Binding 
@tab Not Supported
@item Actual_Processor_Binding 
@tab Supported
@item Allowed_Connection_Protocol 
@tab Not Supported
@item Deadline 
@tab Not Supported
@item Load_Deadline 
@tab Not Supported
@item Load_Time 
@tab Not Supported
@item Not_Collocated 
@tab Not Supported
@item Period 
@tab Not Supported
@item Runtime_Protection 
@tab Not Supported
@item Server_Subprogram_Call_Binding 
@tab Not Supported
@item Source_Code_Size 
@tab Not Supported
@item Source_Data_Size 
@tab Not Supported
@item Source_Stack_Size 
@tab Supported
@item Source_Name 
@tab Not Supported
@item Source_Text 
@tab Not Supported
@item Source_Language 
@tab Not Supported 
@item Synchronized_Component 
@tab Not Supported
@end multitable

@node  Setup of the application
@section Setup of the application

In order for each executable to work correctly, the middleware must be
properly set up. In the case of PolyORB, we used an API named ARAO
(AADL Runtime API for Ocarina). the setup consists in two phases :
@itemize
@item adding @code{with} and @code{pragma} clauses to initialize the
middleware parameters.
@item build Portable Object Adapters for each in port.
@end itemize

The nature of these with clauses depends on these
factors:
@itemize
@item The number of threads in the node
@item The presence or not of periodic threads
@end itemize

The setup is done by including (@code{with}) static or generated
packages. Those packages can be divided into three classes :
@itemize
@item Basic setup package, which are called by all process.
@item Tasking package, which are either no_tasking (only one thread in 
the process) or full_tasking (more than one thread in the process).
@item Object Adapter setup package, which can be either static (if no 
priorities management has been set in AADL description) or generated.
@end itemize

Example:

@include setup-sample.aadl.texi

The process above contains more than one thread, so the Middleware
need to be set up in a multitask mode. The execution of a particular
node follows this order: first, it put the information concerning its
ports in the middleware memory, then collects the information on the
other processes (to which it is connected).

The code of the @code{proc} process is:

@include setup-sample.ada.texi

And the code of the generated file @code{ARAO.Setup.Application} is:

@include arao-setup.ada.texi

Note that, since no priorities has been set in AADL description,
Object Adapter is a generic one.

If thread priorities have been set in AADL description, then ARAO will
build a custom Portable Object Adapter. The building of Portable
Object Adapter depends of a set of data such has receiver thread
priority and stack size, and the number of out ports connected to his
thread. A lane will be created for each port, which will contain
thread for every connected out port. Lane priority and stack size will
be inherited from AADL thread description, or set to default.

Let's modify the previous example by adding priorities to each threads.

@include setup-sample-priorities.aadl.texi

Then Ocarina will generate another version of
@code{ARAO.Setup.Application}, which will contain calls to a custom
Object Adapter generator in @code{ARAO.Setup.OA.Multithreaded.Prio}.

@include arao-setup-priorities.ada.texi

@node  Node positioning
@section Node positioning

Node (process) location is done via a native mechanism of PolyORB. By
overloading the abstract function Get_Conf of PolyORB.Parameters, we
can assign a specific location to a node.

For each process, Ocarina will generate a package
@code{PolyORB.Parameters.Partition} which will contains a static array
and a Get_Conf function definition linking the current node location
to PolyORB local data. When PolyORB will Initialize itself, this
function will be called as it's registered in the Initialize
hierarchy.

Example :

@include positioning-sample.aadl.texi

@include polyorb-parameters-partition.ada.texi

@node  Description of the ARAO API
@section Description of the ARAO API

@menu
* API to manipulate PolyORB::
* PolyORB Setup files::
@end menu

ARAO, the middleware API, contains package to use and configure the
PolyORB middleware.

@node API to manipulate PolyORB
@subsection API to manipulate PolyORB

@include arao-obj_adapters.ads.texi

@include arao-rt_obj_adapters.ads.texi

@include arao-periodic_threads.ads.texi

@include arao-requests.ads.texi

@include arao-utils.ads.texi

@node PolyORB Setup files
@subsection PolyORB Setup files

@include arao-setup-ocarina_oa.ads.texi

@include arao-setup-oa-multithreaded.ads.texi

@include arao-setup-oa-multithreaded-prio.ads.texi

@c -------------------------------------------------------------------
@c GNU's FDL

@include gfdl.texi

@c -------------------------------------------------------------------
@node Index
@unnumbered Index
@c -------------------------------------------------------------------

@printindex cp

@c end

@bye

@c %%% Local Variables:
@c %%% mode: texinfo
@c %%% mode: flyspell
@c %%% ispell-dictionary: "en"
@c %%% End:
