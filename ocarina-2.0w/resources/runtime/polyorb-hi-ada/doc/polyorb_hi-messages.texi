@smallexample

------------------------------------------------------------------------------
-- @i{                                                                         --}
-- @i{                         PolyORB HI COMPONENTS                           --}
-- @i{                                                                         --}
-- @i{                 P O L Y O R B _ H I . M E S S A G E S                   --}
-- @i{                                                                         --}
-- @i{                                S p e c                                  --}
-- @i{                                                                         --}
-- @i{              Copyright (C) 2006-2008, GET-Telecom Paris.                --}
-- @i{                                                                         --}
-- @i{PolyORB HI is free software; you  can  redistribute  it and/or modify it --}
-- @i{under terms of the GNU General Public License as published by the Free   --}
-- @i{Software Foundation; either version 2, or (at your option) any later.    --}
-- @i{PolyORB HI is distributed  in the hope that it will be useful, but       --}
-- @i{WITHOUT ANY WARRANTY;  without even the implied warranty of              --}
-- @i{MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General --}
-- @i{Public License for more details. You should have received  a copy of the --}
-- @i{GNU General Public  License  distributed with PolyORB HI; see file       --}
-- @i{COPYING. If not, write  to the Free  Software Foundation, 51 Franklin    --}
-- @i{Street, Fifth Floor, Boston, MA 02111-1301, USA.                         --}
-- @i{                                                                         --}
-- @i{As a special exception,  if other files  instantiate  generics from this --}
-- @i{unit, or you link  this unit with other files  to produce an executable, --}
-- @i{this  unit  does not  by itself cause  the resulting  executable  to  be --}
-- @i{covered  by the  GNU  General  Public  License.  This exception does not --}
-- @i{however invalidate  any other reasons why  the executable file  might be --}
-- @i{covered by the  GNU Public License.                                      --}
-- @i{                                                                         --}
-- @i{               PolyORB HI is maintained by GET Telecom Paris             --}
-- @i{                                                                         --}
------------------------------------------------------------------------------

-- @i{ Definition of the messages exchanged by PolyORB HI partitions}

@b{with} PolyORB_HI.Streams;
@b{with} PolyORB_HI_Generated.Deployment;

@b{package} PolyORB_HI.Messages @b{is}

   @b{pragma} Preelaborate;

   @b{use} PolyORB_HI.Streams;
   @b{use} PolyORB_HI_Generated.Deployment;

   @b{type} Message_Type @b{is} @b{private};
   -- @i{ Base type of messages exchanged between nodes}

   Invalid_Message : @b{constant} Message_Type;

   Message_Length_Size : @b{constant} := 2;
   -- @i{ Number of bytes to store a message size}

   Header_Size : @b{constant} := Message_Length_Size + 2;
   -- @i{ Size of the header (see the documentation in the body for}
   -- @i{ details on the header internal structure).}

   PDU_Size : @b{constant} := Header_Size + (Max_Payload_Size / 8) + 1;
   -- @i{ Maximum size of a request}

   @b{subtype} Message_Size_Buffer @b{is} Stream_Element_Array
     (1 .. Message_Length_Size);
   -- @i{ The sub-buffer that holds the message length}

   @b{function} To_Length (B : Message_Size_Buffer) @b{return} Stream_Element_Count;
   @b{function} To_Buffer (L : Stream_Element_Count) @b{return} Message_Size_Buffer;
   -- @i{ Conversion functions to store/extract a length in/from a sub-buffer.}

   @b{procedure} Read
     (Stream : @b{in} @b{out} Message_Type;
      Item   :    @b{out} Stream_Element_Array;
      Last   :    @b{out} Stream_Element_Offset);
   -- @i{ Move Item'Length stream elements from the specified stream to}
   -- @i{ fill the array Item. The index of the last stream element}
   -- @i{ transferred is returned in Last. Last is less than Item'Last}
   -- @i{ only if the end of the stream is reached.}

   @b{procedure} Write
     (Stream : @b{in} @b{out} Message_Type;
      Item   :        Stream_Element_Array);
   -- @i{ Append Item to the specified stream}

   @b{procedure} Reallocate (M : @b{in} @b{out} Message_Type);
   -- @i{ Reset M}

   @b{function} Length (M : Message_Type) @b{return} Stream_Element_Count;
   -- @i{ Return length of message M}

   @b{function} Payload (M : Message_Type) @b{return} Stream_Element_Array;
   -- @i{ Return the remaining payload of message M}

   @b{function} Sender (M : Message_Type) @b{return} Entity_Type;
   @b{function} Sender (M : Stream_Element_Array) @b{return} Entity_Type;
   -- @i{ Return the sender of the message M}

   @b{function} Encapsulate
     (Message : Message_Type;
      From    : Entity_Type;
      Entity  : Entity_Type)
     @b{return} Stream_Element_Array;
   -- @i{ Return a byte array including a two byte header (length and}
   -- @i{ originator entity) and Message payload.}

@b{private}
   -- @i{ implementation removed}
@b{end} PolyORB_HI.Messages;

@end smallexample
