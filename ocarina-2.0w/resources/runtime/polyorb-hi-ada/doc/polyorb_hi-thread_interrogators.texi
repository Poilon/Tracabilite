@smallexample

------------------------------------------------------------------------------
-- @i{                                                                         --}
-- @i{                         PolyORB HI COMPONENTS                           --}
-- @i{                                                                         --}
-- @i{     P O L Y O R B _ H I . T H R E A D _ I N T E R R O G A T O R S       --}
-- @i{                                                                         --}
-- @i{                                S p e c                                  --}
-- @i{                                                                         --}
-- @i{              Copyright (C) 2007-2009, GET-Telecom Paris.                --}
-- @i{                                                                         --}
-- @i{PolyORB HI is free software; you  can  redistribute  it and/or modify it --}
-- @i{under terms of the GNU General Public License as published by the Free   --}
-- @i{Software Foundation; either version 2, or (at your option) any later.    --}
-- @i{PolyORB HI is distributed  in the hope that it will be useful, but       --}
-- @i{WITHOUT ANY WARRANTY;  without even the implied warranty of              --}
-- @i{MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General --}
-- @i{Public License for more details. You should have received  a copy of the --}
-- @i{GNU General Public  License  distributed with PolyORB HI; see file       --}
-- @i{COPYING. If not, write  to the Free  Software Foundation, 51 Franklin    --}
-- @i{Street, Fifth Floor, Boston, MA 02111-1301, USA.                         --}
-- @i{                                                                         --}
-- @i{As a special exception,  if other files  instantiate  generics from this --}
-- @i{unit, or you link  this unit with other files  to produce an executable, --}
-- @i{this  unit  does not  by itself cause  the resulting  executable  to  be --}
-- @i{covered  by the  GNU  General  Public  License.  This exception does not --}
-- @i{however invalidate  any other reasons why  the executable file  might be --}
-- @i{covered by the  GNU Public License.                                      --}
-- @i{                                                                         --}
-- @i{               PolyORB HI is maintained by GET Telecom Paris             --}
-- @i{                                                                         --}
------------------------------------------------------------------------------

-- @i{ This package contains a generic definition of the interrogation}
-- @i{ functions that the AADL standard requires for thread ports.}

@b{with} Ada.Real_Time;

@b{with} System;
@b{with} PolyORB_HI_Generated.Deployment;

@b{with} PolyORB_HI.Errors;
@b{with} PolyORB_HI.Messages;
@b{with} PolyORB_HI.Port_Kinds;

@b{generic}

   @b{type} Port_Type @b{is} (<>);
   -- @i{ This should be an enumeration type that represent the port list}
   -- @i{ of a given thread.}

   @b{type} Integer_Array @b{is} @b{array} (Port_Type) @b{of} Integer;
   -- @i{ An array type to specify the port FIFO sizes and urgencies.}

   @b{type} Port_Kind_Array @b{is} @b{array} (Port_Type) @b{of} Port_Kinds.Port_Kind;
   -- @i{ An array type to specify the kind of each port.}

   @b{type} Port_Image_Array @b{is} @b{array} (Port_Type) @b{of}
    PolyORB_HI_Generated.Deployment.Port_Sized_String;
   -- @i{ An array type to specify the image of each port.}

   @b{type} Address_Array @b{is} @b{array} (Port_Type) @b{of} System.Address;
   -- @i{ An array to specify a list of arrays of various sizes.}

   @b{type} Overflow_Protocol_Array @b{is} @b{array} (Port_Type) @b{of}
     Port_Kinds.Overflow_Handling_Protocol;
   -- @i{ An array to specify the overflow_handling_protocol of each port}

   @b{type} Thread_Interface_Type (Port : Port_Type) @b{is} @b{private};
   -- @i{ This is a discriminated record type that represents a thread}
   -- @i{ port. The discriminant of this type must have a default value}
   -- @i{ so that the type size can be computed at compile time.}

   Current_Entity : @b{in} PolyORB_HI_Generated.Deployment.Entity_Type;
   -- @i{ Indicate the thread for which this package has been}
   -- @i{ instantiated.}

   Thread_Port_Kinds : @b{in} Port_Kind_Array;
   -- @i{ For each port, a value indicates the kind and the orientation}
   -- @i{ of the port.}

   Has_Event_Ports : @b{in} Boolean;
   -- @i{ True if Thread_Port_Kinds contains Event or Event Data ports}

   Thread_Port_Images : @b{in} Port_Image_Array;
   -- @i{ For each port, a string indicates the image of the port.}

   Thread_Fifo_Sizes : @b{in} Integer_Array;
   -- @i{ This array gives for each port the FIFO size (depending on the}
   -- @i{ port nature or on an AADL property associated to the port. FIFO}
   -- @i{ size for IN DATA ports is either 1 (immediate connection) or 2}
   -- @i{ (delayed connection). In this case (data ports), the value must}
   -- @i{ not be interpreted as a FIFO size but rather a way to support}
   -- @i{ delayed connections. By convention, FIFO size for all OUT ports}
   -- @i{ must be set to -1 by the code generator.}

   Thread_Fifo_Offsets : @b{in} Integer_Array;
   -- @i{ This array holds an incremental value of the queue size for}
   -- @i{ each IN [event] [data] port. For each IN [event] [data] port, the}
   -- @i{ corresponding offset value is 1 + the sum of all queue sized of}
   -- @i{ the ports declared before it. For other port kinds, the value}
   -- @i{ must be 0. We give this array as a generic formal instead of}
   -- @i{ computing it in this package to guarantee an O(1) access time}
   -- @i{ for queue elements.}

   Thread_Overflow_Protocols : @b{in} Overflow_Protocol_array;
   -- @i{ This array gives for each port the Overflow_Handling_Protocol}
   -- @i{ depending on the AADL property associated to the port.}

   Urgencies : @b{in} Integer_Array;
   -- @i{ This array gives for each port the Urgency depending on the}
   -- @i{ AADL property associated to the port.}

   Global_Data_Queue_Size : @b{in} Integer;
   -- @i{ The sum of all IN [event] [data] port queue sizes. Giving this}
   -- @i{ value as a generic formal in spite of the possibility of}
   -- @i{ deducing it from Thread_Fifo_Sizes is done to guarantee static}
   -- @i{ allocation of the global message queue of the thread.}

   N_Destinations : @b{in} Integer_Array;
   -- @i{ For each OUT port, we give the number of destinations. This}
   -- @i{ will be used to know the length of each element of the array}
   -- @i{ below.}

   Destinations : @b{in} Address_Array;
   -- @i{ For each OUT port, we give the address of an constant}
   -- @i{ Entity_Type array containing the list of all the destination of}
   -- @i{ the port. For IN ports, we give Null_Address.}

   @b{with} @b{procedure} Marshall
     (R :        Thread_Interface_Type;
      M : @b{in} @b{out} PolyORB_Hi.Messages.Message_Type);
   -- @i{ A procedure that marshalls a Thread port content into a message.}

   @b{with} @b{function} Next_Deadline @b{return} Ada.Real_Time.Time;
   -- @i{ To indicate when does the next deadline of the thread occur (in}
   -- @i{ absolute time).}

@b{package} PolyORB_HI.Thread_Interrogators @b{is}

   @b{use} PolyORB_HI.Errors;

   @b{function} Send_Output (Port : Port_Type) @b{return} Error_Kind;
   -- @i{ Explicitly cause events, event data, or data to be transmitted}
   -- @i{ through outgoing ports to receiver ports.}

   @b{procedure} Put_Value (Thread_Interface : Thread_Interface_Type);
   -- @i{ Supply a data value to a port variable. This data value will}
   -- @i{ be transmitted at the next Send call in the source text or by}
   -- @i{ the runtime system at completion time or deadline.}

   @b{procedure} Receive_Input (Port : Port_Type);
   -- @i{ Explicitly request port input to be frozen. Newly arriving data}
   -- @i{ is queued, but does not affect the input that thread has access}
   -- @i{ during the current dispatch. The parameter of the function has}
   -- @i{ the only utility to allow having one Receive_Input per thread.}

   @b{function} Get_Value (Port : Port_Type) @b{return} Thread_Interface_Type;
   -- @i{ Return the value corresponding to a given port. A second call to}
   -- @i{ Get_Value returns always the same value unless Next_Value has}
   -- @i{ been called. If no new values have come, return the latest}
   -- @i{ received value.}

   @b{function} Get_Sender
     (Port : Port_Type)
     @b{return} PolyORB_HI_Generated.Deployment.Entity_Type;
   -- @i{ Return the sender entity of value corresponding to the given port.}
   -- @i{ A second call to Get_Sender returns always the same sender unless}
   -- @i{ Next_Value has been called. If no new values have come, return}
   -- @i{ the latest received value sender entity.}

   @b{function} Get_Count (Port : Port_Type) @b{return} Integer;
   -- @i{ Return the number of event [data] that have been queued in an}
   -- @i{ IN port. A special value of -1 is returned if the Port never}
   -- @i{ received a value since the beginning of the application.}

   @b{procedure} Next_Value (Port : Port_Type);
   -- @i{ Dequeue one value from the IN port queue.}

   @b{procedure} Wait_For_Incoming_Events (Port : @b{out} Port_Type);
   -- @i{ Blocks until an event arrives. The port on which the event}
   -- @i{ arrived is returned.}

   @b{procedure} Get_Next_Event (Port : out Port_Type; Valid : @b{out} Boolean);
   -- @i{ Like 'Wait_For_Incoming_Events' but not blocking. Valid is set}
   -- @i{ to False if no event has been received.}

   @b{procedure} Store_Received_Message
     (Thread_Interface : Thread_Interface_Type;
      From             : PolyORB_HI_Generated.Deployment.Entity_Type;
      Time_Stamp       : Ada.Real_Time.Time    := Ada.Real_Time.Clock);
   -- @i{ This subprogram is usually called by the transport layer to}
   -- @i{ store new incoming messages. Time_Stamp indicates from which}
   -- @i{ instant a data port with a delayed connection becomes}
   -- @i{ deliverable. For other kinds of ports, this parameter value is}
   -- @i{ set to the message reception time.}

   @b{function} Get_Time_Stamp (P : Port_Type) @b{return} Ada.Real_Time.Time;
   -- @i{ Return the timestamp of the latest value received on data port}
   -- @i{ P.}

@b{end} PolyORB_HI.Thread_Interrogators;

@end smallexample
