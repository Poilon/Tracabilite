# Makefile.in generated by automake 1.11.1 from Makefile.am.
# projects/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# The use of ADA_PROJECT_PATH="..." is incompatible with the use of
# the -aP gnatmake flag.

pkgdatadir = $(datadir)/ocarina
pkgincludedir = $(includedir)/ocarina
pkglibdir = $(libdir)/ocarina
pkglibexecdir = $(libexecdir)/ocarina
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/ocarina.gpr.in $(top_srcdir)/Makefile.common
subdir = projects
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/support/ada.m4 \
	$(top_srcdir)/support/gnu_make.m4 \
	$(top_srcdir)/support/revision_utils.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES = ocarina.gpr
CONFIG_CLEAN_VPATH_FILES =
SOURCES =
DIST_SOURCES =
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
AADL_VERSION = AADL_V1
ACLOCAL = ${SHELL} /home/poilon/goinfre/mini-pfe/ocarina-2.0w/support/missing --run aclocal-1.11
ADA = gnatgcc
ADA_FOR_TARGET = gnatgcc
AMTAR = ${SHELL} /home/poilon/goinfre/mini-pfe/ocarina-2.0w/support/missing --run tar
AUTOCONF = ${SHELL} /home/poilon/goinfre/mini-pfe/ocarina-2.0w/support/missing --run autoconf
AUTOHEADER = ${SHELL} /home/poilon/goinfre/mini-pfe/ocarina-2.0w/support/missing --run autoheader
AUTOMAKE = ${SHELL} /home/poilon/goinfre/mini-pfe/ocarina-2.0w/support/missing --run automake-1.11
AWK = mawk
CC = gcc
CCDEPMODE = depmode=none
CFLAGS = -g -O2
CHMOD = chmod
CP = cp
CPPFLAGS = 
CYGPATH_U = echo
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"ocarina\" -DPACKAGE_TARNAME=\"ocarina\" -DPACKAGE_VERSION=\"2.0w\" -DPACKAGE_STRING=\"ocarina\ 2.0w\" -DPACKAGE_BUGREPORT=\"ocarina-users@enst.fr\" -DPACKAGE_URL=\"\" -DPACKAGE=\"ocarina\" -DVERSION=\"2.0w\"
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EXEEXT = 
EXE_SUFFIX = 
GCOV = -- 
GNAMAKE_FOR_TARGET = 
GNATCHOP = gnatchop
GNATCLEAN = gnatclean
GNATFLAGS = -XBUILD=debug
GNATLS = gnatls
GNATMAKE = gnatmake
GNATMAKE_FOR_TARGET = gnatmake
GNAT_LIB_FLAGS = -XLIBRARY=static
GNU_MAKE = make
GREP = grep
HAVE_GNATMAKE_APDIR = yes
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LAST_CONFIG_DATE = Wednesday 18 May 2011, 19:52:31
LAST_CONFIG_YEAR = 2011
LDFLAGS = 
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/poilon/goinfre/mini-pfe/ocarina-2.0w/support/missing --run makeinfo
MKDIR_P = /bin/mkdir -p
MV = mv
OBJEXT = o
PACKAGE = ocarina
PACKAGE_BUGREPORT = ocarina-users@enst.fr
PACKAGE_NAME = ocarina
PACKAGE_STRING = ocarina 2.0w
PACKAGE_TARNAME = ocarina
PACKAGE_URL = 
PACKAGE_VERSION = 2.0w
PATH_KIND = UNIX
PATH_SEP = :
PATH_SEPARATOR = :
PYTHON = /usr/bin/python
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_PLATFORM = linux2
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 2.7
RANLIB = ranlib
RM = rm
RUNTIME_LIST = 
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
SVN_REVISION = 
VERSION = 2.0w
XMLADA_CONFIG = no
XMLADA_INCS = 
XMLADA_LIBS = 
XMLADA_PROJECT = 
abs_builddir = /home/poilon/goinfre/mini-pfe/ocarina-2.0w/projects
abs_srcdir = /home/poilon/goinfre/mini-pfe/ocarina-2.0w/projects
abs_top_builddir = /home/poilon/goinfre/mini-pfe/ocarina-2.0w
abs_top_srcdir = /home/poilon/goinfre/mini-pfe/ocarina-2.0w
ac_ct_CC = gcc
am__include = include
am__leading_dot = .
am__quote = 
am__tar = tar --format=posix -chf - "$$tardir"
am__untar = tar -xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/poilon/goinfre/mini-pfe/ocarina-2.0w/support/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/ocarina
pkgpythondir = ${pythondir}/ocarina
prefix = /usr/ocarina2.0w
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${exec_prefix}/lib/python2.7/site-packages
pythondir = ${prefix}/lib/python2.7/site-packages
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc
top_build_prefix = ../
top_builddir = ..
top_srcdir = ..
#INIT_ADA_PROJECT_PATH = ADA_PROJECT_PATH="$(top_srcdir)/projects$(PATH_SEP)$(top_builddir)/projects$(PATH_SEP)$$ADA_PROJECT_PATH"
##INIT_ADA_PROJECT_PATH = ADA_PROJECT_PATH="$(XMLADA_PRJ)$(PATH_SEP)$(top_srcdir)/projects$(PATH_SEP)$(top_builddir)/projects$(PATH_SEP)$$ADA_PROJECT_PATH"
INIT_ADA_PROJECT_PATH = 
#AP_FLAGS = 
AP_FLAGS = ${addprefix -aP, $(top_srcdir)/projects $(top_builddir)/projects}
#AP_FLAGS = ${addprefix -aP, $(XMLADA_PRJ) $(top_srcdir)/projects $(top_builddir)/projects}

# The absolute source and build dire, depending on the platform
PL_DEP_ABS_SRC_DIR = ${shell $(CYGPATH_W) "/home/poilon/goinfre/mini-pfe/ocarina-2.0w/src"}
PL_DEP_ABS_BUILD_DIR = ${shell $(CYGPATH_W) "/home/poilon/goinfre/mini-pfe/ocarina-2.0w/src"}

# The absolute path to the XMLAda project directory, depending on the
# platform
XMLADA_PRJ = ${shell $(CYGPATH_W) ""}

# Some common rules to fetch Ada specs and bodies

# If the Ada specs and bodies have to be generated from Pseudo-IDL
# descriptions, we deduce their name from the P-IDL file name and we
# remove the source directory prefix because they would be located in
# the build directory.
PIDL_SPECS = ${shell find $(srcdir) -name '*.idl' 2> /dev/null}
TREE_SPECS = ${patsubst $(srcdir)/%, %, $(PIDL_SPECS:.idl=.ads)}
TREE_BODIES = ${patsubst $(srcdir)/%, %, $(PIDL_SPECS:.idl=.adb)}

# Retrieve all other Ada specs and bodies.
BRUTE_ADA_SPECS = ${shell find . $(srcdir) -name '*.ads' | grep -v 'b~' 2> /dev/null}
BRUTE_ADA_BODIES = ${shell find . $(srcdir) -name '*.adb' | grep -v 'b~' 2> /dev/null}

# The purpose of the sort is to remove duplicates.
ADA_SPECS = ${sort $(TREE_SPECS) $(BRUTE_ADA_SPECS)}
ADA_BODIES = ${sort $(TREE_BODIES) $(BRUTE_ADA_BODIES)}

# Common rule to install Ada sources and libraries (Requires $(alidir)
# to be defined in the including make file)
adadir = $(includedir)/ocarina
alidir = $(libdir)/ocarina

# The order of the project files is important for saving compile time
BUILD_PROJECTS = \
	ocarina-core.gpr \
	ocarina-frontends.gpr \
	ocarina-backends.gpr \
	ocarina-config.gpr \
	ocarina-transfo.gpr \
	ocarina-main.gpr


# All project files have to be packaged with "make dist"
EXTRA_DIST = \
	$(srcdir)/ocarina.gpr \
	$(srcdir)/ocarina-frontends.gpr \
	$(srcdir)/ocarina-backends.gpr \
	$(srcdir)/ocarina-core.gpr \
	$(srcdir)/ocarina-main.gpr \
	$(srcdir)/ocarina-transfo.gpr \
	$(srcdir)/ocarina-config.gpr \
	$(srcdir)/restrictions.adc

BUILD_STAMPS = $(BUILD_PROJECTS:.gpr=.gpr-build)
CLEAN_PROJECTS = $(BUILD_PROJECTS)
CLEAN_STAMPS = $(CLEAN_PROJECTS:.gpr=.gpr-clean)

# Object directories (*.o, *.ali)
OBJECT_DIRS = $(top_builddir)/src/core/objects \
	$(top_builddir)/src/frontends/objects \
	$(top_builddir)/src/backends/objects \
	$(top_builddir)/src/transfo/objects \
	$(top_builddir)/src/main/objects 


# Library directories (*.ali, *.a)
LIB_DIRS = $(top_builddir)/src/core/libs \
	$(top_builddir)/src/frontends/libs \
	$(top_builddir)/src/backends/libs \
	$(top_builddir)/src/transfo/libs \
	$(top_builddir)/src/config/libs \
	$(top_builddir)/src/main/libs 


# All directories used for the build process. If the configure is
# performed from a directory different from the top source directory,
# AND ONLY IN THIS CASE, we need to create some additional
# subdirectories which are used in project files
EXTRA_BUILD_DIRS = /src/core/tree
BUILD_DIRS = ${filter-out \
      ${addprefix $(top_srcdir), $(EXTRA_BUILD_DIRS)}, \
      $(OBJECT_DIRS) $(LIB_DIRS) ${addprefix $(top_builddir), $(EXTRA_BUILD_DIRS)}}

BUILD_DIRS_STAMPS = $(BUILD_DIRS:=-stamp)

# Pseudo-IDL files that are used to generate the tree manipulators.
TREE_PIDL_SPECS = \
	src/core/tree/ocarina-me_aadl-aadl_tree-nodes.idl \
	src/core/tree/ocarina-me_aadl-aadl_instances-nodes.idl \
        src/core/tree/ocarina-me_aadl_ba-ba_tree-nodes.idl \
        src/core/tree/ocarina-me_real-real_tree-nodes.idl \
        src/backends/ocarina-backends-ada_tree-nodes.idl \
	src/backends/ocarina-backends-c_tree-nodes.idl \
	src/backends/ocarina-backends-xml_tree-nodes.idl \
	src/backends/ocarina-backends-pn-nodes.idl \
	src/backends/ocarina-backends-rtsj_tree-nodes.idl

TREE_ADA_SPECS = ${addprefix $(top_builddir)/, $(TREE_PIDL_SPECS:.idl=.ads)}
TREE_ADA_BODIES = ${addprefix $(top_builddir)/, $(TREE_PIDL_SPECS:.idl=.adb)}
TREE_PIDL_STAMPS = ${addprefix $(top_builddir)/, $(TREE_PIDL_SPECS:.idl=.idl-stamp)}

# Tree manipulator generation mode:
#  hard : maintainer mode or packaging mode
#  soft : user mode
# This variable has to be set to "hard" by default and overriden by
# calls to make 'GEN_MODE=...'
GEN_MODE = hard

# Various tools
MKNODES_SRC_DIR = $(top_srcdir)/tools/mknodes
MKNODES_BUILD_DIR = $(top_builddir)/tools/mknodes
GENERATE_TREE = $(top_srcdir)/tools/generate_tree.sh
DISTCLEANFILES = \
	$(TREE_ADA_SPECS) \
	$(TREE_ADA_BODIES) \
	$(TREE_PIDL_STAMPS)

PARALLEL_GNATMAKE_FLAGS = -j4
all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/Makefile.common $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu projects/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu projects/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
ocarina.gpr: $(top_builddir)/config.status $(srcdir)/ocarina.gpr.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
tags: TAGS
TAGS:

ctags: CTAGS
CTAGS:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
	$(MAKE) $(AM_MAKEFLAGS) \
	  top_distdir="$(top_distdir)" distdir="$(distdir)" \
	  dist-hook
check-am: all-am
check: check-am
all-am: Makefile all-local
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-test -z "$(DISTCLEANFILES)" || rm -f $(DISTCLEANFILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic distclean-local

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: install-am install-strip

.PHONY: all all-am all-local check check-am clean clean-generic \
	clean-local dist-hook distclean distclean-generic \
	distclean-local distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-generic pdf pdf-am ps ps-am uninstall uninstall-am


install-ada-libs:
	$(INSTALL) -d $(DESTDIR)$(adadir)
	$(INSTALL) -d $(DESTDIR)$(alidir)
	for f in $(ADA_SPECS) $(ADA_BODIES); do \
	  $(INSTALL) -m 444 $$f $(DESTDIR)$(adadir); \
	done
	for f in libs/*.ali; do \
	  $(INSTALL) -m 444 $$f $(DESTDIR)$(alidir); \
	done
	$(INSTALL) -d $(DESTDIR)$(libdir)
	for f in libs/lib*; do \
	  $(INSTALL) -m 444 $$f $(DESTDIR)$(libdir); \
	done

uninstall-ada-libs:
	rm -rf $(DESTDIR)$(adadir) $(DESTDIR)$(alidir)
	rm -f $(DESTDIR)$(libdir)/libocarina*

all-local: $(BUILD_DIRS) maybe-generate-tree-files $(BUILD_STAMPS)

$(BUILD_STAMPS): %-build:
	$(INIT_ADA_PROJECT_PATH) $(GNATMAKE_FOR_TARGET) \
	  $(PARALLEL_GNATMAKE_FLAGS) -P $* $(GNATFLAGS) $(GNAT_LIB_FLAGS) \
	  -XABS_SRC_DIR="$(PL_DEP_ABS_SRC_DIR)" \
	  -XABS_BUILD_DIR="$(PL_DEP_ABS_BUILD_DIR)" \
	  $(AP_FLAGS);

clean-local: $(BUILD_DIRS) $(CLEAN_STAMPS) clean-mknodes

# XXX creating/deleting ocarina-configuration.adb is to please 
# gnatclean that requires this file to be present to delete files ...

$(CLEAN_STAMPS): %-clean:
	touch $(top_builddir)/src/main/ocarina-configuration.adb
	$(INIT_ADA_PROJECT_PATH) $(GNATCLEAN) -P $* $(GNATFLAGS) $(GNAT_LIB_FLAGS)\
	  -XABS_SRC_DIR="$(PL_DEP_ABS_SRC_DIR)" \
	  -XABS_BUILD_DIR="$(PL_DEP_ABS_BUILD_DIR)" \
	  $(AP_FLAGS) ;
	rm $(top_builddir)/src/main/ocarina-configuration.adb

distclean-local:
	for d in $(BUILD_DIRS); do \
	  echo "Deleting directory: $${d}"; \
	  rm -rf $${d}; \
	  rm -f $${d}-stamp; \
	done

$(BUILD_DIRS): $(BUILD_DIRS_STAMPS)
	@echo "Creating directory: $@"
	-mkdir -p $@

$(BUILD_DIRS_STAMPS):
	-touch $@

maybe-generate-tree-files: build-mknodes
	$(MAKE) 'GEN_MODE=soft' $(TREE_ADA_SPECS)

# Mknodes needs to be compiled using the native GNATMAKE since it is
# used only on the host.

build-mknodes:
	if [ -f $(MKNODES_SRC_DIR)/mknodes.gpr ]; then \
	   mkdir -p $(MKNODES_BUILD_DIR)/objects; \
	   $(INIT_ADA_PROJECT_PATH) \
	     $(GNATMAKE) -P $(MKNODES_SRC_DIR)/mknodes.gpr \
	     -XABS_SRC_DIR="$(PL_DEP_ABS_SRC_DIR)" \
	     -XABS_BUILD_DIR="$(PL_DEP_ABS_BUILD_DIR)" \
	     $(AP_FLAGS) \
	     $(GNATFLAGS) $(GNAT_LIB_FLAG); \
	fi

clean-mknodes:
	if [ -f $(MKNODES_SRC_DIR)/mknodes.gpr ]; then \
	     $(INIT_ADA_PROJECT_PATH) \
	     $(GNATCLEAN) -P $(MKNODES_SRC_DIR)/mknodes.gpr \
	     -XABS_SRC_DIR="$(PL_DEP_ABS_SRC_DIR)" \
	     -XABS_BUILD_DIR="$(PL_DEP_ABS_BUILD_DIR)" \
	     $(AP_FLAGS); \
	   rm -rf $(MKNODES_BUILD_DIR)/objects; \
	fi

$(top_builddir)/%.ads $(top_builddir)/%.adb: $(top_srcdir)/%.idl $(top_builddir)/%.idl-stamp
	MKNODES_DIR="$(MKNODES_BUILD_DIR)" \
	UHEADERS_DIR="$(top_builddir)/support" \
	OUTPUT_DIR="${dir $@}" \
	GNU_MAKE="${GNU_MAKE}" \
	CYGPATH_W="${CYGPATH_W}" \
	  $(GENERATE_TREE) $(GEN_MODE) $<

%.idl-stamp:
	mkdir -p ${dir $@}
	touch $*.idl-stamp

dist-hook: build-mknodes $(TREE_ADA_SPECS) $(TREE_ADA_BODIES)

debug-makefile:
	@echo "=========================================================="
	@echo "TREE_PIDL_SPECS = $(TREE_PIDL_SPECS)"
	@echo "=========================================================="
	@echo "TREE_PIDL_STAMPS = $(TREE_PIDL_STAMPS)"
	@echo "=========================================================="
	@echo "TREE_ADA_SPECS = $(TREE_ADA_SPECS)"
	@echo "=========================================================="
	@echo "TREE_ADA_BODIES = $(TREE_ADA_BODIES)"
	@echo "=========================================================="

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
