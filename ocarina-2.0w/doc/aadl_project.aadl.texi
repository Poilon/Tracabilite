@smallexample

--******************************************************
-- @i{  AADL Standard AADL_V1.0}
-- @i{ Appendix A (normative)}
-- @i{ Predeclared Property Sets}
-- @i{ 03Nov04}
-- @i{ Revised 14May06}
--******************************************************

@b{property} @b{set} AADL_Project @b{is}

  Default_Active_Thread_Handling_Protocol : @b{constant}
     Supported_Active_Thread_Handling_Protocols => abort;
  -- @i{one of the choices of Supported_Active_Thread_Handling_Protocols.}

  Supported_Active_Thread_Handling_Protocols: @b{type} @b{enumeration}
    (abort,
     complete_one_flush_queue,
     complete_one_transfer_queue,
     complete_one_preserve_queue,
     complete_all);
  -- @i{a subset may be supported.}

  Supported_Connection_Protocols: @b{type} @b{enumeration}
    (HTTP,
     HTTPS,
     UDP,
     IP_TCP);
  -- @i{The following are example protocols.}
  -- @i{(HTTP, HTTPS, UDP, IP_TPC);}

  Supported_Concurrency_Control_Protocols: @b{type} @b{enumeration}
    (NoneSpecified,
     Read_Only,
     Protected_Access,
     Priority_Ceiling);
  -- @i{phf : NoneSpecified instead of None}
  -- @i{The following are example concurrency control protocols.}
  -- @i{(Interrupt_Masking, Maximum_Priority, Priority_Inheritance,}
  -- @i{ Priority_Ceiling)}

  Supported_Dispatch_Protocols: @b{type} @b{enumeration}
    (Periodic,
     Aperiodic,
     Sporadic,
     Hybrid,
     Background);
  -- @i{The following are protocols for which the semantics are defined.}
  -- @i{(Periodic, Sporadic, Aperiodic, Hybrid, Background);}

  Supported_Hardware_Source_Languages: @b{type} @b{enumeration}
    (VHDL);
  -- @i{The following is an example hardware description language.}
  -- @i{(VHDL)}

  -- @i{phf A26: added}
  Supported_Queue_Processing_Protocols: @b{type} @b{enumeration}
    (FIFO);
  -- @i{The Supported_Queue_Processing_Protocols property enumeration}
  -- @i{type specifies the set of queue processing protocols that are}
  -- @i{supported.}

  Supported_Scheduling_Protocols: @b{type} @b{enumeration}
    (PARAMETRIC_PROTOCOL,
     EARLIEST_DEADLINE_FIRST_PROTOCOL,
     LEAST_LAXITY_FIRST_PROTOCOL,
     RATE_MONOTONIC_PROTOCOL,
     DEADLINE_MONOTONIC_PROTOCOL,
     ROUND_ROBIN_PROTOCOL,
     TIME_SHARING_BASED_ON_WAIT_TIME_PROTOCOL,
     POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL,
     D_OVER_PROTOCOL,
     MAXIMUM_URGENCY_FIRST_BASED_ON_LAXITY_PROTOCOL,
     MAXIMUM_URGENCY_FIRST_BASED_ON_DEADLINE_PROTOCOL,
     TIME_SHARING_BASED_ON_CPU_USAGE_PROTOCOL,
     NO_SCHEDULING_PROTOCOL,
     HIERARCHICAL_CYCLIC_PROTOCOL,
     HIERARCHICAL_ROUND_ROBIN_PROTOCOL,
     HIERARCHICAL_FIXED_PRIORITY_PROTOCOL,
     HIERARCHICAL_PARAMETRIC_PROTOCOL);
  -- @i{The following are example scheduling protocols.}
  -- @i{(RMS, EDF, Sporadicserver, SlackServer, ARINC653)}

  Supported_Source_Languages: @b{type} @b{enumeration}
    (Ada95,
     Ada,     -- @i{alias for Ada95}
     Ada05,   -- @i{alias for Ada95}
     ASN1,
     C,
     Lustre,
     Lustre5, -- @i{alias for Lustre}
     Lustre6, -- @i{alias for Lustre}
     RTSJ,    -- @i{Real Time Specification for Java}
     SCADE6,  -- @i{alias for Lustre}
     SDL,
     Simulink,
     Simulink_6_5);
  -- @i{The following are example software source languages.}
  -- @i{( Ada95, C, Simulink_6_5 )}

  Max_Aadlinteger: @b{constant} @b{aadlinteger} => 2#1#e32;

  Max_Base_Address: @b{constant} @b{aadlinteger} => 512;

  Max_Memory_Size: @b{constant} @b{aadlinteger} Size_Units => 2#1#e32 B;

  Max_Queue_Size: @b{constant} @b{aadlinteger} => 512;

  Max_Thread_Limit: @b{constant} @b{aadlinteger} => 32;

  Max_Time: @b{constant} @b{aadlinteger} Time_Units => 1000 hr;

  Max_Urgency: @b{constant} @b{aadlinteger} => 12;

  Max_Word_Count: @b{constant} @b{aadlinteger} => 2#1#e32;

  Max_Word_Space: @b{constant} @b{aadlinteger} => 64;

  Size_Units	: @b{type} @b{units} (
    Bits,
    B     => Bits  * 8,
    KB    => B     * 1000,
    MB    => KB    * 1000,
    GB    => MB    * 1000);

  Time_Units : @b{type} @b{units} (
    ps,
    Ns    => ps  * 1000,
    Us    => Ns  * 1000,
    Ms    => Us  * 1000,
    Sec   => Ms  * 1000,
    Min   => Sec * 60,
    Hr    => Min * 60);

@b{end} AADL_Project;

@end smallexample
