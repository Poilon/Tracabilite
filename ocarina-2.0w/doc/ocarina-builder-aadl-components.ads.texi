@subsubsection Ocarina.Builder.AADL.Components 


This package defines the following subprograms:

@strong{Add_Annex}: Add an annex subclause into a component (type or
implementation). Component is a Node_Id referencing the
component. Annex is a Node_Id referencing the annex
subclause. Returns True if the annex was correctly added into
the component, else False.

@example
@b{function }Add_Annex
     (Component : Node_Id;
      Annex     : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_Connection}: Add a connection into a component implementation. Component is
a Node_Id referencing the component implementation. Connection
is a Node_Id referencing the connection. Returns True if the
connection was correctly added into the component, else False.

@example
@b{function }Add_Connection
     (Component  : Node_Id;
      Connection : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_Feature}: Add a feature into a component type. Component is a Node_Id
referencing the component type. Feature is a Node_Id
referencing the feature. Returns True if the feature was
correctly added into the component, else False.

@example
@b{function }Add_Feature
     (Component : Node_Id;
      Feature   : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_Refined_Type}: Add a refined type into a component implementation. Refined
types correspond to refinements of the component type features.

@example
@b{function }Add_Refined_Type
     (Component : Node_Id;
      Refined_Type : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_Subcomponent}: Add a subcomponent into a component implementation. Component
is a Node_Id referencing the component
implementation. Subcomponent is a Node_Id referencing the
subcomponent. Returns True if the subcomponent was correctly
added into the component, else False.

@example
@b{function }Add_Subcomponent
     (Component    : Node_Id;
      Subcomponent : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_Prototype}: Add a prototype into a component implementation or a component type.
Component is a Node_Id referencing the component implementation or the
component type. Prototype is a Node_Id referencing the prototype.
Returns True if the prototype was correctly added into the component,
else False.

@example
@b{function }Add_Proto@b{type }     (Component : Node_Id;
      Proto@b{type }: Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_Subprogram_Call_Sequence}: Add a subprogram call sequence into a component
implementation. Component is a Node_Id referencing the
component implementation. Call_Sequence is a Node_Id
referencing the subcomponent. Returns True if the sequence was
correctly added into the component, else False.

@example
@b{function }Add_Subprogram_Call_Sequence
     (Component     : Node_Id;
      Call_Sequence : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_Flow_Spec}: Add a flow specification into a component type. Component is a
Node_Id referencing the component type. Flow_Spec is a Node_Id
referencing the flow. Returns True if the flow was correctly
added into the component, else False.

@example
@b{function }Add_Flow_Spec
     (Component : Node_Id;
      Flow_Spec : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_Flow_Implementation}: Add a flow implementation into a component
implementation. Component is a Node_Id referencing the
component implementation. Flow_Impl is a Node_Id referencing
the flow. Returns True if the flow was correctly added into the
component, else False.

@example
@b{function }Add_Flow_Implementation
     (Component : Node_Id;
      Flow_Impl : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_End_To_End_Flow_Spec}: Add an end to end flow specification into a component
implementation. Component is a Node_Id referencing the
component implementation. Flow_Impl is a Node_Id referencing
the flow. Returns True if the flow was correctly added into the
component, else False.

@example
@b{function }Add_End_To_End_Flow_Spec
     (Component       : Node_Id;
      End_To_End_Flow : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_Mode}: Add a mode (declaration or transition) into a component
implementation. Component is a Node_Id referencing the
component implementation. Mode is a Node_Id referencing the
mode declaration or mode transition. Returns True if the mode
was correctly added into the component, else False.

@example
@b{function }Add_Mode
     (Component : Node_Id;
      Mode      : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_Property_Association}: Add a property association into a component (type or
implementation). Component is a Node_Id referencing the
component type or implementation. Property_Association is a
Node_Id referencing the property association. Returns True if
the property was correctly added into the component, else
False.
Component creation

@example
@b{function }Add_Property_Association
     (Component            : Node_Id;
      Property_Association : Node_Id)
     @b{return }Boolean;
@end example


@strong{Add_New_Component_Type}: Create a new component type node. A component type can be
inserted into a package or the top level AADL specification
(aka the unnamed namespace). Loc is the location of the
component in the parsed text. Identifier is a Node_Id
referencing the name of the component. Namespace is either a
package specification or the top level AADL
specification. Component_Type is the component category
(processor, memory, process, etc.). Is_Private indicates if the
component is declaraed in the private or the public part of the
package; it is only relevant if Namespace references a package
specification. Returns the Node_Id of the newly created
component type node, or No_Node if something went wrong.

@example
@b{function }Add_New_Component_Type
     (Loc            : Location;
      Identifier     : Node_Id;
      Namespace      : Node_Id;
      Component_Type : Ocarina.ME_AADL.Component_Category;
      Is_Private     : Boolean := False)
     @b{return }Node_Id;
@end example


@strong{Add_New_Component_Implementation}: Create a new component implementation node. A component
implementation can be inserted into a package or the top level
AADL specification (aka the unnamed namespace). Loc is the
location of the component in the parsed text. Identifier is a
Node_Id referencing the name of the component. Namespace is
either a package specification or the top level AADL
specification. Component_Type is the component category
(processor, memory, process, etc.). Is_Private indicates if the
component is declaraed in the private or the public part of the
package; it is only relevant if Namespace references a package
specification. Returns the Node_Id of the newly created
component implementation node, or No_Node if something went
wrong.

@example
@b{function }Add_New_Component_Implementation
     (Loc            : Location;
      Identifier     : Node_Id;
      Namespace      : Node_Id;
      Component_Type : Ocarina.ME_AADL.Component_Category;
      Is_Private     : Boolean := False)
     @b{return }Node_Id;
@end example


@strong{Add_New_Feature_Group}: Create a new feature group type (AADL_V2) or port group type (AADL_V1).
It can be inserted into a package or the top level AADL specification.)

@example
@b{function }Add_New_Feature_Group
     (Loc        : Location;
      Name       : Node_Id;
      Namespace  : Node_Id;
      Is_Private : Boolean := False)
     @b{return }Node_Id;
@end example


