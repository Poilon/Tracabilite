----------
-- Data --
----------

data message
properties 
  Data_Model::Data_Representation => string;
  Data_Model::Dimension => (30);
end message;

-----------------
-- Subprograms --
-----------------

subprogram send_message
features
  msg_out : out parameter message;
properties
  source_language => Ada95;
  source_name     => "Repository.Send_Message";
end send_message;

subprogram receive_message
features
  msg_in : in parameter message;
properties
  source_language => Ada95;
  source_name     => "Repository.Receive_Message";
end receive_message;

subprogram transmit_message
features
  msg_in  : in  parameter message;
  msg_out : out parameter message;
properties
  source_language => Ada95;
  source_name     => "Repository.Transmit_Message";
end transmit_message;

subprogram alterate_message_1
features
  msg_in  : in  parameter message;
  msg_out : out parameter message;
properties
  source_language => Ada95;
  source_name     => "Repository.Alterate_Message_1";
end alterate_message_1;

subprogram alterate_message_2
features
  msg_in  : in  parameter message;
  msg_out : out parameter message;
properties
  source_language => Ada95;
  source_name     => "Repository.Alterate_Message_2";
end alterate_message_2;

-------------
-- Threads --
-------------

--  The sender thread

thread sender
features
  msg_out : out event data port message;
properties
  Dispatch_Protocol => Periodic;
  Period            => 1000 Ms;
end sender;

thread implementation sender.simple
calls {
  sp1 : subprogram send_message;
};
connections
  parameter sp1.msg_out -> msg_out;
end sender.simple;

--  The receiver thread

thread receiver
features
  msg_in : in event data port message;
properties
  Dispatch_Protocol => Aperiodic;
end receiver;

thread implementation receiver.simple
calls {
  sp1 : subprogram receive_message;
};
connections
  parameter msg_in -> sp1.msg_in;
end receiver.simple;

--  The transmitter thread

thread transmitter
features
  msg_in  : in  event data port message;
  msg_out : out event data port message;
properties
  Dispatch_Protocol => Aperiodic;
end transmitter;

thread implementation transmitter.checker
calls {
  sp1 : subprogram transmit_message;
  };
connections
  parameter msg_in      -> sp1.msg_in;
  parameter sp1.msg_out -> msg_out;
end transmitter.checker;

thread implementation transmitter.alterate_1
calls {
  sp1 : subprogram alterate_message_1;
  };
connections
  parameter msg_in      -> sp1.msg_in;
  parameter sp1.msg_out -> msg_out;
end transmitter.alterate_1;

thread implementation transmitter.alterate_2
calls {
  sp1 : subprogram alterate_message_2;
  };
connections
  parameter msg_in      -> sp1.msg_in;
  parameter sp1.msg_out -> msg_out;
end transmitter.alterate_2;

---------------
-- Processes --
---------------

-- Extremity process

process extremity
features
  msg_in  : in  event data port message;
  msg_out : out event data port message;
end extremity;

process implementation extremity.first
subcomponents
  alt_1 : thread transmitter.alterate_1;
connections
  event data port msg_in        -> alt_1.msg_in;
  event data port alt_1.msg_out -> msg_out;
end extremity.first;

process implementation extremity.second
subcomponents
  alt_2 : thread transmitter.alterate_2;
connections
  event data port msg_in        -> alt_2.msg_in;
  event data port alt_2.msg_out -> msg_out;
end extremity.second;

--  Intermediary process

process intermediary
features
  first_msg_in   : in  event data port message;
  first_msg_out  : out event data port message;
  second_msg_in  : in  event data port message;
  second_msg_out : out event data port message;
end intermediary;

process implementation intermediary.simple
subcomponents
  send : thread sender.simple;
  recv : thread receiver.simple;
  tran : thread transmitter.checker;
connections
  event data port first_msg_in  -> tran.msg_in;
  event data port tran.msg_out  -> second_msg_out;
  event data port second_msg_in -> recv.msg_in;
  event data port send.msg_out  -> first_msg_out;
end intermediary.simple;
